#UI initialization	
Start:
li x6 32768  # load base address of terminal into a register.	
li x23 4294967055
li x27 35168

#Two Processes That Count Up to 250 million 
li x7 84 #T
addi x8 x6 329	
sb x7 0(x8)	

li x7 119 #w	
addi x8 x8 1	
sb x7 0(x8)	

li x7 111 #o
addi x8 x8 1
sb x7 0(x8)	

li x7 80 #P	
addi x8 x8 2
sb x7 0(x8)	

li x7 114 #r	
addi x8 x8 1	
sb x7 0(x8)	

li x7 111 #o	
addi x8 x8 1
sb x7 0(x8)	

li x7 99 #c	
addi x8 x8 1	
sb x7 0(x8)	

li x7 101 #e
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #ss	
addi x8 x8 1	
sb x7 0(x8)	
addi x8 x8 1
sb x7 0(x8)	

li x7 101 #e
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #s	
addi x8 x8 1	
sb x7 0(x8)	

li x7 84 #T	
addi x8 x8 2	
sb x7 0(x8)
	
li x7 104 #h	
addi x8 x8 1	
sb x7 0(x8)
	
li x7 97 #a
addi x8 x8 1	
sb x7 0(x8)
	
li x7 116 #t	
addi x8 x8 1	
sb x7 0(x8)
	
li x7 67 #C	
addi x8 x8 2	
sb x7 0(x8)
	
li x7 111 #o	
addi x8 x8 1	
sb x7 0(x8)	
	
li x7 117 #u
addi x8 x8 1	
sb x7 0(x8)

li x7 110 #n	
addi x8 x8 1	
sb x7 0(x8)

li x7 116 #t	
addi x8 x8 1	
sb x7 0(x8)

li x7 85 #U
addi x8 x8 2	
sb x7 0(x8)

li x7 112 #p
addi x8 x8 1
sb x7 0(x8)

li x7 84 #T	
addi x8 x8 2	
sb x7 0(x8)

li x7 111 #o	
addi x8 x8 1	
sb x7 0(x8)
	
li x7 50 #2	
addi x8 x8 2
sb x7 0(x8)	
	
li x7 53 #5
addi x8 x8 1	
sb x7 0(x8)

li x7 48 #0
addi x8 x8 1	
sb x7 0(x8)

li x7 77 #M	
addi x8 x8 2	
sb x7 0(x8)

li x7 105 #i
addi x8 x8 1	
sb x7 0(x8)

li x7 108 #ll
addi x8 x8 1	
sb x7 0(x8)
addi x8 x8 1
sb x7 0(x8)

li x7 105 #i
addi x8 x8 1
sb x7 0(x8)

li x7 111 #o
addi x8 x8 1	
sb x7 0(x8)

li x7 110 #n
addi x8 x8 1
sb x7 0(x8)

li x7 46 #.	
addi x8 x8 1	
sb x7 0(x8)	

#Pipeline	
	
li x7 80 #P	
addi x8 x6 9	
sb x7 0(x8)	
	
li x7 105 #i	
addi x8 x8 1	
sb x7 0(x8)	
	
li x7 112 #p	
addi x8 x8 1	
sb x7 0(x8)	
	
li x7 101 #e	
addi x8 x8 1	
sb x7 0(x8)	
	
li x7 108 #l	
addi x8 x8 1	
sb x7 0(x8)	
	
li x7 105 #i	
addi x8 x8 1	
sb x7 0(x8)	
	
li x7 110 #n	
addi x8 x8 1	
sb x7 0(x8)	
	
li x7 101 #e	
addi x8 x8 1	
sb x7 0(x8)	
	
#Benchmark	
	
li x7 66 #B	
addi x8 x8 2	
sb x7 0(x8)	
	
li x7 101 #e	
addi x8 x8 1	
sb x7 0(x8)	
	
li x7 110 #n	
addi x8 x8 1	
sb x7 0(x8)	
	
li x7 99 #c	
addi x8 x8 1
sb x7 0(x8)	
	
li x7 104 #h	
addi x8 x8 1	
sb x7 0(x8)	
	
li x7 109 #m
addi x8 x8 1	
sb x7 0(x8)	
	
li x7 97 #a
addi x8 x8 1	
sb x7 0(x8)	
	
li x7 114 #r
addi x8 x8 1
sb x7 0(x8)	
	
li x7 107 #k
addi x8 x8 1	
sb x7 0(x8)	

li x7 46 #.	
addi x8 x8 1	
sb x7 0(x8)	
	
#Process	
li x7 80 #P	
addi x8 x6 729	
sb x7 0(x8)	
	
li x7 114 #r	
addi x8 x6 730	
sb x7 0(x8)	
	
li x7 111 #o	
addi x8 x6 731	
sb x7 0(x8)	
	
li x7 99 #c	
addi x8 x6 732	
sb x7 0(x8)	
	
li x7 101 #e	
addi x8 x6 733	
sb x7 0(x8)	
	
li x7 115 #s	
addi x8 x6 734	
sb x7 0(x8)	
	
li x7 115 #s	
addi x8 x6 735	
sb x7 0(x8)	
	
#Unoptimized
	
li x7 85 #U	
addi x8 x6 737	
sb x7 0(x8)	
	
li x7 110 #n
addi x8 x6 738	
sb x7 0(x8)	

li x7 111 #o
addi x8 x6 739	
sb x7 0(x8)

li x7 112 #p
addi x8 x6 740	
sb x7 0(x8)

li x7 116 #t
addi x8 x6 741	
sb x7 0(x8)

li x7 105 #i
addi x8 x6 742	
sb x7 0(x8)

li x7 109 #m
addi x8 x6 743	
sb x7 0(x8)

li x7 105 #i
addi x8 x6 744	
sb x7 0(x8)

li x7 122 #z
addi x8 x6 745	
sb x7 0(x8)

li x7 101 #e
addi x8 x6 746	
sb x7 0(x8)

li x7 100 #d
addi x8 x6 747	
sb x7 0(x8)

#For

li x7 70 #F
addi x8 x6 749	
sb x7 0(x8)

li x7 111 #o
addi x8 x6 750	
sb x7 0(x8)

li x7 114 #r
addi x8 x6 751	
sb x7 0(x8)

#Pipelining

li x7 80 #P	
addi x8 x6 753	
sb x7 0(x8)	
	
li x7 105 #i	
addi x8 x6 754	
sb x7 0(x8)	
	
li x7 112 #p	
addi x8 x6 755	
sb x7 0(x8)	
	
li x7 101 #e	
addi x8 x6 756	
sb x7 0(x8)	
	
li x7 108 #l	
addi x8 x6 757	
sb x7 0(x8)	
	
li x7 105 #i	
addi x8 x6 758	
sb x7 0(x8)	
	
li x7 110 #n	
addi x8 x6 759	
sb x7 0(x8)	
	
li x7 105 #i	
addi x8 x6 760	
sb x7 0(x8)	

li x7 110 #n	
addi x8 x6 761	
sb x7 0(x8)

li x7 103 #g	
addi x8 x6 762	
sb x7 0(x8)

li x7 58 #	
addi x8 x6 763	
sb x7 0(x8)

#A[--....--]	
	
li x7 91 #[	
addi x8 x6 809	
sb x7 0(x8)	
	
li x7 45 #-	
addi x8 x6	810
sb x7 0(x8)	
	
addi x8 x6	811
sb x7 0(x8)	
	
addi x8 x6	812
sb x7 0(x8)	
	
addi x8 x6	813
sb x7 0(x8)	
	
addi x8 x6	814
sb x7 0(x8)	
	
addi x8 x6	815
sb x7 0(x8)	
	
addi x8 x6	816
sb x7 0(x8)	
	
addi x8 x6	817
sb x7 0(x8)	
	
addi x8 x6	818
sb x7 0(x8)	
	
addi x8 x6	819
sb x7 0(x8)	
	
addi x8 x6	820
sb x7 0(x8)	
	
addi x8 x6	821
sb x7 0(x8)	
	
addi x8 x6	822
sb x7 0(x8)	
	
addi x8 x6	823
sb x7 0(x8)	
	
addi x8 x6	824
sb x7 0(x8)	
	
addi x8 x6	825
sb x7 0(x8)	
	
addi x8 x6	826
sb x7 0(x8)	
	
addi x8 x6	827
sb x7 0(x8)	
	
addi x8 x6	828
sb x7 0(x8)	
	
addi x8 x6	829
sb x7 0(x8)	
	
addi x8 x6	830
sb x7 0(x8)	
	
addi x8 x6	831
sb x7 0(x8)	
	
addi x8 x6	832
sb x7 0(x8)	
	
addi x8 x6	833
sb x7 0(x8)	
	
addi x8 x6	834
sb x7 0(x8)	
	
addi x8 x6	835
sb x7 0(x8)	
	
addi x8 x6	836
sb x7 0(x8)	
	
addi x8 x6	837
sb x7 0(x8)	
	
addi x8 x6	838
sb x7 0(x8)	
	
addi x8 x6	839
sb x7 0(x8)	
	
addi x8 x6	840
sb x7 0(x8)	
	
addi x8 x6	841
sb x7 0(x8)	
	
addi x8 x6	842
sb x7 0(x8)	
	
addi x8 x6	843
sb x7 0(x8)	
	
addi x8 x6	844
sb x7 0(x8)	
	
addi x8 x6	845
sb x7 0(x8)	
	
addi x8 x6	846
sb x7 0(x8)	
	
addi x8 x6	847
sb x7 0(x8)	
	
addi x8 x6	848
sb x7 0(x8)	
	
addi x8 x6	849
sb x7 0(x8)	
	
addi x8 x6	850
sb x7 0(x8)	
	
addi x8 x6	851
sb x7 0(x8)	
	
addi x8 x6	852
sb x7 0(x8)	
	
addi x8 x6	853
sb x7 0(x8)	
	
addi x8 x6	854
sb x7 0(x8)	
	
addi x8 x6	855
sb x7 0(x8)	
	
addi x8 x6	856
sb x7 0(x8)	
	
addi x8 x6	857
sb x7 0(x8)	
	
addi x8 x6	858
sb x7 0(x8)	
	
addi x8 x6	859
sb x7 0(x8)	
	
li x7 93 #]	
addi x8 x6 860	
sb x7 0(x8)	
	
#Process Optimized For Pipelining
	
li x7 80 #P	
addi x8 x6 1529	
sb x7 0(x8)	
	
li x7 114 #r	
addi x8 x6 1530	
sb x7 0(x8)	
	
li x7 111 #o	
addi x8 x6 1531	
sb x7 0(x8)	
	
li x7 99 #c	
addi x8 x6 1532	
sb x7 0(x8)	
	
li x7 101 #e	
addi x8 x6 1533	
sb x7 0(x8)	
	
li x7 115 #s	
addi x8 x6 1534	
sb x7 0(x8)	
	
li x7 115 #s	
addi x8 x6 1535	
sb x7 0(x8)	
	
#Optimized	
	
li x7 79 #O
addi x8 x6 1537	
sb x7 0(x8)

li x7 112 #p
addi x8 x6 1538	
sb x7 0(x8)

li x7 116 #t
addi x8 x6 1539	
sb x7 0(x8)

li x7 105 #i
addi x8 x6 1540	
sb x7 0(x8)

li x7 109 #m
addi x8 x6 1541	
sb x7 0(x8)

li x7 105 #i
addi x8 x6 1542	
sb x7 0(x8)

li x7 122 #z
addi x8 x6 1543	
sb x7 0(x8)

li x7 101 #e
addi x8 x6 1544	
sb x7 0(x8)

li x7 100 #d
addi x8 x6 1545	
sb x7 0(x8)

#For

li x7 70 #F
addi x8 x6 1547	
sb x7 0(x8)

li x7 111 #o
addi x8 x6 1548	
sb x7 0(x8)

li x7 114 #r
addi x8 x6 1549	
sb x7 0(x8)

#Pipelining

li x7 80 #P	
addi x8 x6 1551	
sb x7 0(x8)	
	
li x7 105 #i	
addi x8 x6 1552	
sb x7 0(x8)	
	
li x7 112 #p	
addi x8 x6 1553	
sb x7 0(x8)	
	
li x7 101 #e	
addi x8 x6 1554	
sb x7 0(x8)	
	
li x7 108 #l	
addi x8 x6 1555	
sb x7 0(x8)	
	
li x7 105 #i	
addi x8 x6 1556	
sb x7 0(x8)	
	
li x7 110 #n	
addi x8 x6 1557	
sb x7 0(x8)	
	
li x7 105 #i	
addi x8 x6 1558	
sb x7 0(x8)	

li x7 110 #n	
addi x8 x6 1559	
sb x7 0(x8)

li x7 103 #g	
addi x8 x6 1560	
sb x7 0(x8)
	
li x7 58 #	
addi x8 x6 1561	
sb x7 0(x8)	

#Consists of 5 add instructions incrementing a value stored in one register per loop to cause hazards

li x7 67 #C	
addi x8 x6 1045	
sb x7 0(x8)	

li x7 111 #o	
addi x8 x8 1	
sb x7 0(x8)	

li x7 110 #n	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #s
addi x8 x8 1	
sb x7 0(x8)	

li x7 105 #i	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #s
addi x8 x8 1	
sb x7 0(x8)	

li x7 116 #t	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #s	
addi x8 x8 1	
sb x7 0(x8)	

li x7 111 #of
addi x8 x8 2	
sb x7 0(x8)	

li x7 102 #f	
addi x8 x8 1	
sb x7 0(x8)	

li x7 53 #5	
addi x8 x8 2
sb x7 0(x8)	

li x7 97 #add
addi x8 x8 2
sb x7 0(x8)	

li x7 100 #d	
addi x8 x8 1
sb x7 0(x8)

li x7 100 #d	
addi x8 x8 1
sb x7 0(x8)	

li x7 105 #instructions	
addi x8 x8 2	
sb x7 0(x8)	

li x7 110 #n	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #s	
addi x8 x8 1	
sb x7 0(x8)	

li x7 116 #t	
addi x8 x8 1	
sb x7 0(x8)	

li x7 114 #r	
addi x8 x8 1	
sb x7 0(x8)	

li x7 117 #u	
addi x8 x8 1	
sb x7 0(x8)	

li x7 99 #c	
addi x8 x8 1	
sb x7 0(x8)	

li x7 116 #t	
addi x8 x8 1	
sb x7 0(x8)	

li x7 105 #i	
addi x8 x8 1	
sb x7 0(x8)	

li x7 111 #o	
addi x8 x8 1	
sb x7 0(x8)	

li x7 110 #n	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #s	
addi x8 x8 1	
sb x7 0(x8)	

li x7 105 #incrementing	
addi x8 x8 2	
sb x7 0(x8)	
	
li x7 110 #n
addi x8 x8 1	
sb x7 0(x8)	

li x7 99 #c	
addi x8 x8 1	
sb x7 0(x8)	

li x7 114 #r	
addi x8 x8 1	
sb x7 0(x8)	

li x7 101 #e	
addi x8 x8 1	
sb x7 0(x8)	

li x7 109 #m	
addi x8 x8 1	
sb x7 0(x8)	

li x7 101 #e	
addi x8 x8 1	
sb x7 0(x8)	

li x7 110 #n	
addi x8 x8 1	
sb x7 0(x8)	

li x7 116 #t	
addi x8 x8 1	
sb x7 0(x8)	

li x7 105 #i	
addi x8 x8 1	
sb x7 0(x8)	

li x7 110 #n	
addi x8 x8 1	
sb x7 0(x8)	

li x7 103 #g	
addi x8 x8 1	
sb x7 0(x8)	

li x7 97 #a	
addi x8 x8 2	
sb x7 0(x8)	

li x7 118 #value	
addi x8 x8 2
sb x7 0(x8)	

li x7 97 #a
addi x8 x8 1	
sb x7 0(x8)	

li x7 108 #l
addi x8 x8 1	
sb x7 0(x8)	

li x7 117 #u	
addi x8 x8 1	
sb x7 0(x8)	

li x7 101 #e	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #stored
addi x8 x8 2
sb x7 0(x8)	

li x7 116 #t	
addi x8 x8 1	
sb x7 0(x8)	

li x7 111 #o	
addi x8 x8 1	
sb x7 0(x8)	

li x7 114 #r	
addi x8 x8 1	
sb x7 0(x8)	

li x7 101 #e	
addi x8 x8 1	
sb x7 0(x8)	

li x7 100 #d	
addi x8 x8 1	
sb x7 0(x8)	

li x7 105 #in	
addi x8 x8 2	
sb x7 0(x8)	

li x7 110 #n	
addi x8 x8 1	
sb x7 0(x8)	

li x7 111 #one
addi x8 x8 2	
sb x7 0(x8)	

li x7 110 #n	
addi x8 x8 1	
sb x7 0(x8)	

li x7 101 #e
addi x8 x8 1	
sb x7 0(x8)	

li x7 114 #register	
addi x8 x8 2
sb x7 0(x8)	

li x7 101 #e	
addi x8 x8 1	
sb x7 0(x8)	

li x7 103 #g	
addi x8 x8 1	
sb x7 0(x8)	

li x7 105 #i	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #s	
addi x8 x8 1	
sb x7 0(x8)	

li x7 116 #t	
addi x8 x8 1	
sb x7 0(x8)	

li x7 101 #e	
addi x8 x8 1	
sb x7 0(x8)	

li x7 114 #r	
addi x8 x8 1	
sb x7 0(x8)	

li x7 112 #per	
addi x8 x6 1125	
sb x7 0(x8)	

li x7 101 #e
addi x8 x8 1	
sb x7 0(x8)	

li x7 114 #r	
addi x8 x8 1	
sb x7 0(x8)	

li x7 108 #loop	
addi x8 x8 2	
sb x7 0(x8)	

li x7 111 #o	
addi x8 x8 1	
sb x7 0(x8)	

li x7 111 #o	
addi x8 x8 1	
sb x7 0(x8)	

li x7 112 #p	
addi x8 x8 1	
sb x7 0(x8)	

li x7 116 #to	
addi x8 x8 2	
sb x7 0(x8)	

li x7 111 #o	
addi x8 x8 1	
sb x7 0(x8)	

li x7 99 #cause	
addi x8 x8 2	
sb x7 0(x8)	

li x7 97 #a	
addi x8 x8 1	
sb x7 0(x8)	

li x7 117 #u	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #s	
addi x8 x8 1	
sb x7 0(x8)	

li x7 101 #e	
addi x8 x8 1	
sb x7 0(x8)	

li x7 104 #hazards	
addi x8 x8 2	
sb x7 0(x8)	

li x7 97 #a	
addi x8 x8 1	
sb x7 0(x8)	

li x7 122 #z	
addi x8 x8 1	
sb x7 0(x8)	

li x7 97 #a	
addi x8 x8 1	
sb x7 0(x8)	

li x7 114 #r	
addi x8 x8 1	
sb x7 0(x8)	

li x7 100 #d	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #s
addi x8 x8 1	
sb x7 0(x8)	

li x7 46 #.	
addi x8 x8 1	
sb x7 0(x8)	


#B[--....--]	
	
li x7 91 #[	
addi x8 x6 1609	
sb x7 0(x8)	
	
li x7 45 #-	
	
addi x8 x6	1610
sb x7 0(x8)	
	
addi x8 x6	1611
sb x7 0(x8)	
	
addi x8 x6	1612
sb x7 0(x8)	
	
addi x8 x6	1613
sb x7 0(x8)	
	
addi x8 x6	1614
sb x7 0(x8)	
	
addi x8 x6	1615
sb x7 0(x8)	
	
addi x8 x6	1616
sb x7 0(x8)	
	
addi x8 x6	1617
sb x7 0(x8)	
	
addi x8 x6	1618
sb x7 0(x8)	
	
addi x8 x6	1619
sb x7 0(x8)	
	
addi x8 x6	1620
sb x7 0(x8)	
	
addi x8 x6	1621
sb x7 0(x8)	
	
addi x8 x6	1622
sb x7 0(x8)	
	
addi x8 x6	1623
sb x7 0(x8)	
	
addi x8 x6	1624
sb x7 0(x8)	
	
addi x8 x6	1625
sb x7 0(x8)	
	
addi x8 x6	1626
sb x7 0(x8)	
	
addi x8 x6	1627
sb x7 0(x8)	
	
addi x8 x6	1628
sb x7 0(x8)	
	
addi x8 x6	1629
sb x7 0(x8)	
	
addi x8 x6	1630
sb x7 0(x8)	
	
addi x8 x6	1631
sb x7 0(x8)	
	
addi x8 x6	1632
sb x7 0(x8)	
	
addi x8 x6	1633
sb x7 0(x8)	
	
addi x8 x6	1634
sb x7 0(x8)	
	
addi x8 x6	1635
sb x7 0(x8)	
	
addi x8 x6	1636
sb x7 0(x8)	
	
addi x8 x6	1637
sb x7 0(x8)	
	
addi x8 x6	1638
sb x7 0(x8)	
	
addi x8 x6	1639
sb x7 0(x8)	
	
addi x8 x6	1640
sb x7 0(x8)	
	
addi x8 x6	1641
sb x7 0(x8)	
	
addi x8 x6	1642
sb x7 0(x8)	
	
addi x8 x6	1643
sb x7 0(x8)	
	
addi x8 x6	1644
sb x7 0(x8)	
	
addi x8 x6	1645
sb x7 0(x8)	
	
addi x8 x6	1646
sb x7 0(x8)	
	
addi x8 x6	1647
sb x7 0(x8)	
	
addi x8 x6	1648
sb x7 0(x8)	
	
addi x8 x6	1649
sb x7 0(x8)	
	
addi x8 x6	1650
sb x7 0(x8)	
	
addi x8 x6	1651
sb x7 0(x8)	
	
addi x8 x6	1652
sb x7 0(x8)	
	
addi x8 x6	1653
sb x7 0(x8)	
	
addi x8 x6	1654
sb x7 0(x8)	
	
addi x8 x6	1655
sb x7 0(x8)	
	
addi x8 x6	1656
sb x7 0(x8)	
	
addi x8 x6	1657
sb x7 0(x8)	
	
addi x8 x6	1658
sb x7 0(x8)	
	
addi x8 x6	1659
sb x7 0(x8)	
		
li x7 93 #]	
addi x8 x6 1660	
sb x7 0(x8)	
	
#Consists of 5 add instructions incrementing values stored in seperate registers per loop

li x7 67 #C	
addi x8 x6 1845	
sb x7 0(x8)	

li x7 111 #o	
addi x8 x8 1	
sb x7 0(x8)	

li x7 110 #n	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #s
addi x8 x8 1	
sb x7 0(x8)	

li x7 105 #i	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #s
addi x8 x8 1	
sb x7 0(x8)	

li x7 116 #t	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #s	
addi x8 x8 1	
sb x7 0(x8)	

li x7 111 #of
addi x8 x8 2	
sb x7 0(x8)	

li x7 102 #f	
addi x8 x8 1	
sb x7 0(x8)	

li x7 53 #5	
addi x8 x8 2
sb x7 0(x8)	

li x7 97 #add
addi x8 x8 2
sb x7 0(x8)	

li x7 100 #d	
addi x8 x8 1
sb x7 0(x8)

li x7 100 #d	
addi x8 x8 1
sb x7 0(x8)	

li x7 105 #instructions	
addi x8 x8 2	
sb x7 0(x8)	

li x7 110 #n	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #s	
addi x8 x8 1	
sb x7 0(x8)	

li x7 116 #t	
addi x8 x8 1	
sb x7 0(x8)	

li x7 114 #r	
addi x8 x8 1	
sb x7 0(x8)	

li x7 117 #u	
addi x8 x8 1	
sb x7 0(x8)	

li x7 99 #c	
addi x8 x8 1	
sb x7 0(x8)	

li x7 116 #t	
addi x8 x8 1	
sb x7 0(x8)	

li x7 105 #i	
addi x8 x8 1	
sb x7 0(x8)	

li x7 111 #o	
addi x8 x8 1	
sb x7 0(x8)	

li x7 110 #n	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #s	
addi x8 x8 1	
sb x7 0(x8)	

li x7 105 #incrementing	
addi x8 x8 2	
sb x7 0(x8)	
	
li x7 110 #n
addi x8 x8 1	
sb x7 0(x8)	

li x7 99 #c	
addi x8 x8 1	
sb x7 0(x8)	

li x7 114 #r	
addi x8 x8 1	
sb x7 0(x8)	

li x7 101 #e	
addi x8 x8 1	
sb x7 0(x8)	

li x7 109 #m	
addi x8 x8 1	
sb x7 0(x8)	

li x7 101 #e	
addi x8 x8 1	
sb x7 0(x8)	

li x7 110 #n	
addi x8 x8 1	
sb x7 0(x8)	

li x7 116 #t	
addi x8 x8 1	
sb x7 0(x8)	

li x7 105 #i	
addi x8 x8 1	
sb x7 0(x8)	

li x7 110 #n	
addi x8 x8 1	
sb x7 0(x8)	

li x7 103 #g	
addi x8 x8 1	
sb x7 0(x8)	

li x7 118 #values	
addi x8 x8 2
sb x7 0(x8)	

li x7 97 #a
addi x8 x8 1	
sb x7 0(x8)	

li x7 108 #l
addi x8 x8 1	
sb x7 0(x8)	

li x7 117 #u	
addi x8 x8 1	
sb x7 0(x8)	

li x7 101 #e	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #s	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #stored
addi x8 x8 2
sb x7 0(x8)	

li x7 116 #t	
addi x8 x8 1	
sb x7 0(x8)	

li x7 111 #o	
addi x8 x8 1	
sb x7 0(x8)	

li x7 114 #r	
addi x8 x8 1	
sb x7 0(x8)	

li x7 101 #e	
addi x8 x8 1	
sb x7 0(x8)	

li x7 100 #d	
addi x8 x8 1	
sb x7 0(x8)	

li x7 105 #in	
addi x8 x8 2	
sb x7 0(x8)	

li x7 110 #n	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #seperate
addi x8 x8 2	
sb x7 0(x8)	

li x7 101 #e
addi x8 x8 1	
sb x7 0(x8)	

li x7 112 #p
addi x8 x8 1	
sb x7 0(x8)	

li x7 101 #e
addi x8 x8 1	
sb x7 0(x8)	

li x7 114 #r
addi x8 x8 1	
sb x7 0(x8)	

li x7 97 #a
addi x8 x8 1	
sb x7 0(x8)	

li x7 116 #t
addi x8 x8 1	
sb x7 0(x8)	

li x7 101 #e
addi x8 x8 1	
sb x7 0(x8)	

li x7 114 #registers	
addi x8 x6 1925
sb x7 0(x8)	

li x7 101 #e	
addi x8 x8 1	
sb x7 0(x8)	

li x7 103 #g	
addi x8 x8 1	
sb x7 0(x8)	

li x7 105 #i	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #s	
addi x8 x8 1	
sb x7 0(x8)	

li x7 116 #t	
addi x8 x8 1	
sb x7 0(x8)	

li x7 101 #e	
addi x8 x8 1	
sb x7 0(x8)	

li x7 114 #r	
addi x8 x8 1	
sb x7 0(x8)	

li x7 115 #s	
addi x8 x8 1	
sb x7 0(x8)

li x7 112 #per	
addi x8 x8 2	
sb x7 0(x8)	

li x7 101 #e
addi x8 x8 1	
sb x7 0(x8)	

li x7 114 #r	
addi x8 x8 1	
sb x7 0(x8)	

li x7 108 #loop	
addi x8 x8 2	
sb x7 0(x8)	

li x7 111 #o	
addi x8 x8 1	
sb x7 0(x8)	

li x7 111 #o	
addi x8 x8 1	
sb x7 0(x8)	

li x7 112 #p	
addi x8 x8 1	
sb x7 0(x8)	

li x7 46 #.	
addi x8 x8 1	
sb x7 0(x8)	
	
	la x10 process1
	la x11 Bar1
	li x20 127
	li x8 32768 
	addi x8 x8 810
	li x18 250000000
	add x5 x5 x0
	li x19 5000000
	addi x21 x19 0
	jalr x1 0(x10)
	
Bar1:	
	sb x20 0(x8)
	addi x8 x8 1
	add x19 x19 x21
	jalr x1 0(x10)
Bar2:
	sb x20 0(x8)
	addi x8 x8 1
	add x19 x19 x21
	jalr x1 0(x10)
	
process1:	
	addi x5 x5 1
	addi x5 x5 1
	addi x5 x5 1
	addi x5 x5 1
	addi x5 x5 1
	beq x5 x19 Bar1
	blt x5 x18 process1	
		
	
	#Complete
	li x6 32768  # load base address of terminal into a register.	
	#C
	li x7 67
	addi x8 x6 933
	sb x7 0(x8)
	#o
	li x7 111
	addi x8 x8 1
	sb x7 0(x8)
	#m
	li x7 109
	addi x8 x8 1
	sb x7 0(x8)
	#p
	li x7 112
	addi x8 x8 1
	sb x7 0(x8)
	#l
	li x7 108
	addi x8 x8 1
	sb x7 0(x8)
	#e
	li x7 101
	addi x8 x8 1
	sb x7 0(x8)
	#t
	li x7 116
	addi x8 x8 1
	sb x7 0(x8)
	#e
	li x7 101
	addi x8 x8 1
	sb x7 0(x8)
	
	
	li x7 93 #]	to fix overshoot bug
	addi x8 x6 860	
	sb x7 0(x8)
	
	li x8 32768 
	addi x8 x8 1610
	li x18 50000000
	li x19 1000000
	li x5 0
	li x6 0
	li x7 0
	li x28 0
	li x29 0
	addi x21 x19 0
	la x10 process2
	la x11 Bar2
	j process2

	
process2:	
	addi x5 x5 1
	addi x6 x6 1
	addi x7 x7 1
	addi x28 x28 1
	addi x29 x29 1
	beq x5 x19 Bar2
	blt x5 x18 process2
	
	#Output Complete
	li x6 32768  # load base address of terminal into a register.	
	#C
	li x7 67
	addi x8 x6 1733
	sb x7 0(x8)
	#o
	li x7 111
	addi x8 x8 1
	sb x7 0(x8)
	#m
	li x7 109
	addi x8 x8 1
	sb x7 0(x8)
	#p
	li x7 112
	addi x8 x8 1
	sb x7 0(x8)
	#l
	li x7 108
	addi x8 x8 1
	sb x7 0(x8)
	#e
	li x7 101
	addi x8 x8 1
	sb x7 0(x8)
	#t
	li x7 116
	addi x8 x8 1
	sb x7 0(x8)
	#e
	li x7 101
	addi x8 x8 1
	sb x7 0(x8)
	la x10 End
	jalr x1 0(x10)
	End:
	#andi x22 x31 240
	#bne x22 x0 reset
	jalr x1 0(x10)

	#reset:
	#li x6 32768
	#li x22 0
	#and x31 x31 x23
	#mv x29 x6
	#resetInner:
	#sb x0 0(x29)
	#addi x29 x29 1
	#blt x29 x27 resetInner
	#j Start

	
	